drop_na(Bother.28)
summary(df)
typeof(df$Patient)
is.factor(df$Patient)
typeof(df$Bother.28)
is.factor(df$Bother.28)
# Variable selection to choose the most important signs
regfit <- regsubsets(Bother.28 ~ Erythema_Total + Exudation_Total
+ Excoriation_Total + Dryness_Total + Cracking_Total
+ Lichenification_Total, data = df)
pacman::p_load(TanakaData, tidyr, dplyr, stargazer, leaps,
ggplot2)
# Variable selection to choose the most important signs
regfit <- regsubsets(Bother.28 ~ Erythema_Total + Exudation_Total
+ Excoriation_Total + Dryness_Total + Cracking_Total
+ Lichenification_Total, data = df)
summary(regfit)
stargazer(regfit, type = "html", align = TRUE, out = "test.htm")
reg.summary = summary(regfit)
names(reg.summary)
reg.summary$rsq
reg.summary
par(mfrow = c(2,2))  # Plot the criteria
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
reg,summary(rss)
reg.summary$rss
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
par(mfrow = c(2,2))  # Plot the criteria
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
points(which.max(reg.summary$adjr2), reg.summary$adjr2[which.max(reg.summary$adjr2)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
points(which.min(reg.summary$cp), reg.summary$cp[which.min(reg.summary$cp)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
points(which.min(reg.summary$bic), reg.summary$bic[which.min(reg.summary$bic)],
col = "red", cex = 2, pch = 20)
dev.off()
par(mfrow = c(2,2))  # Plot the criteria
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
dev.off()
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
par("mar")
par(mfrow = c(2,2))  # Plot the criteria
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
points(which.max(reg.summary$adjr2), reg.summary$adjr2[which.max(reg.summary$adjr2)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
points(which.min(reg.summary$cp), reg.summary$cp[which.min(reg.summary$cp)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
points(which.min(reg.summary$bic), reg.summary$bic[which.min(reg.summary$bic)],
col = "red", cex = 2, pch = 20)
points(which.max(reg.summary$rss), reg.summary$rss[which.max(reg.summary$rss)],
col = "red", cex = 2, pch = 20)
dev.off()
par(mfrow = c(2,2))  # Plot the criteria
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
points(which.max(reg.summary$rss), reg.summary$rss[which.max(reg.summary$rss)],
col = "red", cex = 2, pch = 20)
dev.off()
par(mfrow = c(2,2))  # Plot the criteria
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l")
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
points(which.max(reg.summary$adjr2), reg.summary$adjr2[which.max(reg.summary$adjr2)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
points(which.min(reg.summary$cp), reg.summary$cp[which.min(reg.summary$cp)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
points(which.min(reg.summary$bic), reg.summary$bic[which.min(reg.summary$bic)],
col = "red", cex = 2, pch = 20)
dev.off()
par(mfrow = c(2,2))  # Plot the criteria
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l", cex.axis=0.75)
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
points(which.max(reg.summary$adjr2), reg.summary$adjr2[which.max(reg.summary$adjr2)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
points(which.min(reg.summary$cp), reg.summary$cp[which.min(reg.summary$cp)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
points(which.min(reg.summary$bic), reg.summary$bic[which.min(reg.summary$bic)],
col = "red", cex = 2, pch = 20)
dev.off()
par(mfrow = c(2,2))  # Plot the criteria
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l", cex.axis=1.5)
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
points(which.max(reg.summary$adjr2), reg.summary$adjr2[which.max(reg.summary$adjr2)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
points(which.min(reg.summary$cp), reg.summary$cp[which.min(reg.summary$cp)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
points(which.min(reg.summary$bic), reg.summary$bic[which.min(reg.summary$bic)],
col = "red", cex = 2, pch = 20)
dev.off()
par(mfrow = c(2,2))  # Plot the criteria
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l", cex.lab=1.5)
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
points(which.max(reg.summary$adjr2), reg.summary$adjr2[which.max(reg.summary$adjr2)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
points(which.min(reg.summary$cp), reg.summary$cp[which.min(reg.summary$cp)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
points(which.min(reg.summary$bic), reg.summary$bic[which.min(reg.summary$bic)],
col = "red", cex = 2, pch = 20)
dev.off()
par(mfrow = c(2,2), mar = c(0.2, 0.2, 0.2, 0.2))  # Plot the criteria
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l", cex.lab=1.5)
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
points(which.max(reg.summary$adjr2), reg.summary$adjr2[which.max(reg.summary$adjr2)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
points(which.min(reg.summary$cp), reg.summary$cp[which.min(reg.summary$cp)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
dev.off()
par(mfrow = c(2,2), mar = c(0.7, 0.7, 0.7, 0.7))  # Plot the criteria
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l", cex.lab=1.5)
dev.off()
par(mfrow = c(2,2), mar = c(1, 1, 1, 1))  # Plot the criteria
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l", cex.lab=1.5)
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
points(which.max(reg.summary$adjr2), reg.summary$adjr2[which.max(reg.summary$adjr2)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
points(which.min(reg.summary$cp), reg.summary$cp[which.min(reg.summary$cp)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
points(which.min(reg.summary$bic), reg.summary$bic[which.min(reg.summary$bic)],
col = "red", cex = 2, pch = 20)
dev.off()
par(mfrow = c(2,2), mai = c(1, 1, 1, 1))  # Plot the criteria
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l", cex.lab=1.5)
dev.off()
par(mfrow = c(2,2), mai = c(1, 0.1, 0.1))  # Plot the criteria
dev.off()
par(mfrow = c(2,2), mai = c(1, 0.1, 0.1, 0.1))  # Plot the criteria
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l", cex.lab=1.5)
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l")
points(which.max(reg.summary$adjr2), reg.summary$adjr2[which.max(reg.summary$adjr2)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l")
points(which.min(reg.summary$cp), reg.summary$cp[which.min(reg.summary$cp)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
points(which.min(reg.summary$bic), reg.summary$bic[which.min(reg.summary$bic)],
col = "red", cex = 2, pch = 20)
dev.off()
par(mfrow = c(2,2))  # Plot the criteria
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l", cex.lab=1.3)
dev.off()
par(mfrow = c(2,2))  # Plot the criteria
plot(reg.summary$rss, xlab = "Number of Variables", ylab = "RSS", type = "l", cex.lab=1.3)
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted RSq", type = "l", cex.lab=1.3)
points(which.max(reg.summary$adjr2), reg.summary$adjr2[which.max(reg.summary$adjr2)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "Cp", type = "l", cex.lab=1.3)
points(which.min(reg.summary$cp), reg.summary$cp[which.min(reg.summary$cp)],
col = "red", cex = 2, pch = 20)
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l", cex.lab=1.3)
points(which.min(reg.summary$bic), reg.summary$bic[which.min(reg.summary$bic)],
col = "red", cex = 2, pch = 20)
View(df)
View(df)
# Variable selection with LASSO
y = data.matrix(df$SASSAD)
x = data.matrix(subset(df, ends_with("Total")))
x = data.matrix(select(df, ends_with("Total")))
View(y)
View(x)
View(y)
# Variable selection with LASSO
y = data.matrix(df[, colnames(df) == "SASSAD"])
x = data.matrix(select(df, ends_with("Total")))
View(y)
lasso.fit <- cv.glmnet(x, y, type.measure="mse", alpha=1, family = "gaussian")
pacman::p_load(TanakaData, tidyr, dplyr, stargazer, leaps, glmnet,
ggplot2)
lasso.fit <- cv.glmnet(x, y, type.measure="mse", alpha=1, family = "gaussian")
coef(lasso.fit)
fit <- cv.glmnet(x, y, type.measure="mse", alpha=1, family = "gaussian")
lasso.fit <- glmnet(x, y, family = "gaussian", alpha = 1, lambda = fit$lambda.1se)
coef(lasso.fit)
View(df)
#
fit <- lm(Bother.28 ~ Erythema_Total + Exudation_Total + Excoriation_Total
+ Dryness_Total + Cracking_Total + Lichenification_Total, data = df)
summary(fit)
fit <- cv.glmnet(x, y, type.measure="mse", alpha=1, family = "gaussian")
lasso.fit <- glmnet(x, y, family = "gaussian", alpha = 1, lambda = fit$lambda.1se)
coef(lasso.fit)
fit <- cv.glmnet(x, y, type.measure="mse", alpha=0, family = "gaussian")
lasso.fit <- glmnet(x, y, family = "gaussian", alpha = 0, lambda = fit$lambda.1se)
coef(lasso.fit)
dev.off()
# Cross validation using regression and classification models to predict Bother
df$Bother.28 <- as.factor(df$Bother.28)  # Convert dependent variable into factor
lm.fit <- lm(Bother.28 ~ Erythema_total, data = df)
View(df)
lm.fit <- lm(Bother.28 ~ Erythema_Total, data = df)
summary(lm.fit)
df_bother <- reshape_SWET_to_wide(SWET)
df_sassad <- reshape_sassad_to_wide(extract_signs_SWET())
df <- full_join(df_sassad, df_bother)  # Merge Bother score with SASSAD
df <- drop_na(df)
# Drop irrelevant variables
df <- df[-c(3:8)]    # Drop area total score
df <- df[-c(10:36)]  # Drop Bother on days 1 - 27
df <- subset(df, (Week != 8) & (Week != 20) & (Week != 0))
# Drop missing observations
df <- df %>%
drop_na(SASSAD) %>%
drop_na(Bother.28)
summary(df)
pacman::p_load(TanakaData, tidyr, dplyr, stargazer, leaps, glmnet,
randomForest, naivebayes, nnet, MASS, splines2, ggplot2)
source("functions.R")
is.factor(df$Bother.28)
model <- "linear"
if (model %in% c("linear", "I-spline")) {
factor <- FALSE
} else {
factor = TRUE
}
folds <- make_folds(df, fold)
out <- cross_validate_2(model, df, folds, factor = factor)
out <- cross_validate_2(model, df, folds, factor = factor)
source("functions.R")
out <- cross_validate_2(model, df, folds, factor = factor)
source("functions.R")
out <- cross_validate_2(model, df, folds, factor = factor)
source("functions.R")
out <- cross_validate_2(model, df, folds, factor = factor)
source("functions.R")
out <- cross_validate_2(model, df, folds, factor = factor)
source("functions.R")
out <- cross_validate_2(model, df, folds, factor = factor)
source("functions.R")
out <- cross_validate_2(model, df, folds, factor = factor)
print(dim(tab))
source("functions.R")
out <- cross_validate_2(model, df, folds, factor = factor)
source("functions.R")
out <- cross_validate_2(model, df, folds, factor = factor)
result <- make_dataframe(result, out, model)
result <- data.frame()
result <- make_dataframe(result, out, model)
result
source("functions.R")
result <- data.frame()
folds <- make_folds(df, fold)
out <- cross_validate_2(model, df, folds, factor = factor)
result <- make_dataframe(result, out, model)
result
mean(RMSE)
mean(result$RMSE)
mean(result$Accuracy)
result
out <- cross_validate_2(model, df, folds, factor = factor)
result <- make_dataframe2(result, out, model)
result
result <- data.frame()
out <- cross_validate_2(model, df, folds, factor = factor)
result <- make_dataframe2(result, out, model)
result
mean(result$RMSE)
mean(result$Accuracy)
model <- "ordinal logistic"
folds <- make_folds(df, fold)
out <- cross_validate_2(model, df, folds, factor = factor)
if (model %in% c("linear", "I-spline")) {
factor <- FALSE
} else {
factor = TRUE
}
out <- cross_validate_2(model, df, folds, factor = factor)
source("functions.R")
if (model %in% c("linear", "I-spline")) {
factor <- FALSE
} else {
factor = TRUE
}
folds <- make_folds(df, fold)
out <- cross_validate_2(model, df, folds, factor = factor)
typeof(df$Patient)
typeof(df$Week)
typeof(df$Day)
names(df)
typeof(df$SASSAD)
source("functions.R")
out <- cross_validate_2(model, df, folds, factor = factor)
source("functions.R")
out <- cross_validate_2(model, df, folds, factor = factor)
result <- make_dataframe2(result, out, model)
result
mean(result$RMSE[result$Model=="ordinal logistic"])
mean(result$RMSE[result$Model=="linear"])
mean(result$Accuracy[result$Model=="ordinal logistic"])
mean(result$Accuracy[result$Model=="linear"])
ggplot(result, aes(x = Model, y = RMSE)) +
geom_boxplot()
seed <- 1744384695
set.seed(seed)
fold <- 10   # for cross validation
result <- data.frame()
model <- "ordinal logistic"
if (model %in% c("linear", "I-spline")) {
factor <- FALSE
} else {
factor = TRUE
}
folds <- make_folds(df, fold)
out <- cross_validate_2(model, df, folds, factor = factor)
result <- make_dataframe2(result, out, model)
model <- "linear"
if (model %in% c("linear", "I-spline")) {
factor <- FALSE
} else {
factor = TRUE
}
folds <- make_folds(df, fold)
out <- cross_validate_2(model, df, folds, factor = factor)
result <- make_dataframe2(result, out, model)
ggplot(result, aes(x = Model, y = RMSE)) +
geom_boxplot()
result <- data.frame()
model_list <- c("naiveBayes", "randomForest", "multi-logistic",
"ordinal logistic", "linear", "I-spline")
for (model in model_list) {
if (model %in% c("linear", "I-spline")) {
factor <- FALSE
} else {
factor = TRUE
}
folds <- make_folds(df, fold)
out <- cross_validate_2(model, df, folds, factor = factor)
result <- make_dataframe2(result, out, model)
}
result <- data.frame()
model_list <- c("naiveBayes", "randomForest", "multi-logistic",
"ordinal logistic", "linear", "I-spline")
for (model in model_list) {
if (model %in% c("linear", "I-spline")) {
factor <- FALSE
} else {
factor = TRUE
}
folds <- make_folds(df, fold)
out <- cross_validate_2(model, df, folds, factor = factor)
result <- make_dataframe2(result, out, model)
print(paste0(model, " finished"))
}
result <- data.frame()
model_list <- c("naiveBayes", "randomForest", "multi-logistic",
"ordinal logistic", "linear")
for (model in model_list) {
if (model %in% c("linear", "I-spline")) {
factor <- FALSE
} else {
factor = TRUE
}
folds <- make_folds(df, fold)
out <- cross_validate_2(model, df, folds, factor = factor)
result <- make_dataframe2(result, out, model)
print(paste0(model, " finished"))
}
ggplot(result, aes(x = Model, y = RMSE)) +
geom_boxplot()
source("functions.R")
result <- data.frame()
model_list <- c("naiveBayes", "naiveBayes(sum)", "randomForest",
"randomForest(sum)", "multi-logistic", "multi-logistic(sum)",
"ordinal logistic", "ordinal logistic(sum)")
for (model in model_list) {
folds <- make_folds(df, fold)
out <- cross_validate_2(model, df, folds)
result <- make_dataframe2(result, out, model)
print(paste0(model, " finished"))
}
result
ggplot(result, aes(x = Model, y = RMSE)) +
geom_boxplot()
if (TRUE) {
rmse_plot <- ggplot(result, aes(x = Model, y = RMSE)) +
geom_boxplot() +
coord_flip() +
theme_bw(base_size = 20) +
theme(panel.grid.minor.x = element_blank())
acc_plot <- ggplot(result, aes(x = Model, y = Accuracy)) +
geom_boxplot() +
coord_flip() +
theme_bw(base_size = 20) +
theme(panel.grid.minor.x = element_blank())
egg::ggarrange(rmse_plot,
acc_plot + theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank()),
nrow = 1)
}
rm(list = ls())
pacman::p_load(TanakaData, tidyr, dplyr, stargazer, glmnet,
ggplot2, lme4, splines, splines2)
source("functions.R")
seed <- 1744834695
set.seed(seed)
fold <- 10   # for cross validation
df_bother <- reshape_SWET_to_wide(SWET)
df_sassad <- extract_SASSAD_SWET()
df_sassad$Patient <- as.factor(df_sassad$Patient)  # convert numeric into factor
df <- full_join(df_sassad, df_bother)  # Merge Bother score with SASSAD
if (TRUE) {
df$WeekMean.1 <- rowMeans(df[c(4:10)], na.rm = TRUE)  # Generate weekly mean
df$WeekMean.2 <- rowMeans(df[c(11:17)], na.rm = TRUE)
df$WeekMean.3 <- rowMeans(df[c(18:24)], na.rm = TRUE)
df$WeekMean.4 <- rowMeans(df[c(25:31)], na.rm = TRUE)
df$WeekMax.1 <- apply(df[,4:10], 1, max, na.rm = TRUE)  # Generate weekly max
df$WeekMax.2 <- apply(df[,11:17], 1, max, na.rm = TRUE)
df$WeekMax.3 <- apply(df[,18:24], 1, max, na.rm = TRUE)
df$WeekMax.4 <- apply(df[,25:31], 1, max, na.rm = TRUE)
df$WeekMax.1[df$WeekMax.1 == -Inf] <- NaN
df$WeekMax.2[df$WeekMax.2 == -Inf] <- NaN
df$WeekMax.3[df$WeekMax.3 == -Inf] <- NaN
df$WeekMax.4[df$WeekMax.4 == -Inf] <- NaN
}
df <- drop_na(df)
df$ID <- 1:length(df$Patient)
# Linear model of SASSAD on 28 days of Bother
tmp <- select(df, SASSAD | starts_with("Bother"))
# Best variable selection by LASSO
tmp.y <- data.matrix(tmp[,colnames(tmp) == "SASSAD"])
tmp.x <- data.matrix(tmp[, !(colnames(tmp) == "SASSAD")])
lasso.fit <- cv.glmnet(tmp.x, tmp.y, type.measure = "mse", alpha = 1, family = "gaussian")
coef(lasso.fit)
rm(list = ls())
pacman::p_load(TanakaData, tidyr, dplyr, stargazer, leaps, glmnet,
randomForest, naivebayes, nnet, MASS, splines2, ggplot2)
source("functions.R")
seed <- 1744384695
set.seed(seed)
fold <- 10   # for cross validation
df_bother <- reshape_SWET_to_wide(SWET)
df_sassad <- reshape_sassad_to_wide(extract_signs_SWET())
df <- full_join(df_sassad, df_bother)  # Merge Bother score with SASSAD
df <- drop_na(df)
# Drop irrelevant variables
df <- df[-c(3:8)]    # Drop area total score
df <- df[-c(10:36)]  # Drop Bother on days 1 - 27
df <- subset(df, (Week != 8) & (Week != 20) & (Week != 0))
# Drop missing observations
df <- df %>%
drop_na(SASSAD) %>%
drop_na(Bother.28)
# Variable selection with LASSO
y = data.matrix(df[, colnames(df) == "SASSAD"])
x = data.matrix(select(df, ends_with("Total")))
fit <- cv.glmnet(x, y, type.measure="mse", alpha=1, family = "gaussian")
x = data.matrix(select(df, ends_with("Total")))
x = data.matrix(select(df, endsWith("Total")))
x = data.matrix(select(df, ends_with("Total")))
x = data.matrix(select(df, ends_with("Total")))
x = data.matrix(select(df, dplyr::ends_with("Total")))
x = data.matrix(df %>% select(ends_with("Total")))
View(y)
View(df)
# Variable selection with LASSO
y = data.matrix(df[, colnames(df) == "Bother.28"])
x = data.matrix(select(df, ends_with("Total")))
select(df, ends_with("Total"))
View(df)
x = data.matrix(dplyr::select(df, ends_with("Total")))
fit <- cv.glmnet(x, y, type.measure="mse", alpha=1, family = "gaussian")
lasso.fit <- glmnet(x, y, family = "gaussian", alpha = 1, lambda = fit$lambda.1se)
coef(lasso.fit)
rm(list = ls())
pacman::p_load(TanakaData, tidyr, dplyr, stargazer, leaps, glmnet,
randomForest, naivebayes, nnet, MASS, splines2, ggplot2)
source("functions.R")
seed <- 1744384695
set.seed(seed)
fold <- 10   # for cross validation
df_bother <- reshape_SWET_to_wide(SWET)
df_sassad <- reshape_sassad_to_wide(extract_signs_SWET())
df <- full_join(df_sassad, df_bother)  # Merge Bother score with SASSAD
df <- drop_na(df)
# Drop irrelevant variables
df <- df[-c(3:8)]    # Drop area total score
df <- df[-c(10:36)]  # Drop Bother on days 1 - 27
df <- subset(df, (Week != 8) & (Week != 20) & (Week != 0))
# Drop missing observations
df <- df %>%
drop_na(SASSAD) %>%
drop_na(Bother.28)
summary(df)
# Variable selection with LASSO
y = data.matrix(df[, colnames(df) == "Bother.28"])
x = data.matrix(dplyr::select(df, ends_with("Total")))
fit <- cv.glmnet(x, y, type.measure="mse", alpha=1, family = "gaussian")
lasso.fit <- glmnet(x, y, family = "gaussian", alpha = 1, lambda = fit$lambda.1se)
coef(lasso.fit)
coef(fit)
coef(lasso.fit)
# Variable selection with LASSO
y = data.matrix(df[, colnames(df) == "Bother.28"])
x = data.matrix(dplyr::select(df, ends_with("Total")))
fit <- cv.glmnet(x, y, type.measure="mse", alpha=1, family = "gaussian")
lasso.fit <- glmnet(x, y, family = "gaussian", alpha = 1, lambda = fit$lambda.1se)
coef(lasso.fit)
